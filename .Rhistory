plot(grafodf[, 1:5])
plot(grafodf[, 2:5])
hist(grafodf$Degree)
hist(grafodf$Centrality)
hist(grafodf$Closeness)
hist(grafodf$Betweenness)
grafodf$Degree <- (grafodf$Degree - min(grafodf$Degree)) / (max(grafodf$Degree) - min(grafodf$Degree))
grafodf$Centrality <- (grafodf$Centrality - min(grafodf$Centrality)) / (max(grafodf$Centrality) - min(grafodf$Centrality))
grafodf$Closeness <- (grafodf$Closeness - min(grafodf$Closeness)) / (max(grafodf$Closeness) - min(grafodf$Closeness))
grafodf$Betweenness <- (grafodf$Betweenness - min(grafodf$Betweenness)) / (max(grafodf$Betweenness) - min(grafodf$Betweenness))
grafodf
cormatrix <- cor(grafodf[,2:5], method = "pearson")
print(cormatrix)
symnum(cormatrix, cutpoints = c(0.2, 0.4, 0.6, 0.8, 0.9, 0.95, 1),
symbols = c(" ", ".", ",", "+", "*", "B"),
abbr.colnames = TRUE)
corrplot(cormatrix, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = cormatrix, col = col, symm = TRUE)
plot(grafodf)
cm <- cor(grafodf[3:8], method = "pearson")
cm <- cor(grafodf[,3:8], method = "pearson")
cm <- cor(grafodf[,2:7], method = "pearson")
print(cormatrix)
corrplot(cm, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
write.csv(grafodf, file="grafodf.txt")
cm <- cor(grafodf, method = "pearson")
cm <- cor(grafodf[,2:7], method = "pearson")
print(cormatrix)
corrplot(cm, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
#Cargo datos
aristas <- read_excel("./Dataset1.xlsx",
sheet = "WeigthedNetwork")
nodos <- read_excel("./Dataset1.xlsx",
sheet = "NetworkNodes")
#Construyo el grafo
grafo_origen <-
graph_from_data_frame(d = aristas, vertices = nodos,  directed=F)
#Podo cogiendo como umbral 0.4
grafo <- delete_edges(grafo_origen, E(grafo_origen)[PESO<0.4])
#Cargo datos
aristas <- read_excel("./Dataset1.xlsx",
sheet = "WeigthedNetwork")
nodos <- read_excel("./Dataset1.xlsx",
sheet = "NetworkNodes")
#Construyo el grafo
grafo_origen <-
graph_from_data_frame(d = aristas, vertices = nodos,  directed=F)
#Podo cogiendo como umbral 0.4
grafo <- delete_edges(grafo_origen, E(grafo_origen)[PESO<0.4])
df <- read.table("./grafodf.txt", header = TRUE, sep = ",")
grafodf <- df[, 2:5]
df <- read.table("./grafodf.txt", header = TRUE, sep = ",")
grafodf <- df[, 2:5]
grafodf
df <- read.table("./grafodf.txt", header = TRUE, sep = ",")
grafodf <- df[, 3:6]
grafodf
#install.packages("factoextra")
library(igraph)
library(readxl)
library(factoextra)
library(dplyr)
#Cargo datos
aristas <- read_excel("./Dataset1.xlsx",
sheet = "WeigthedNetwork")
nodos <- read_excel("./Dataset1.xlsx",
sheet = "NetworkNodes")
#Construyo el grafo
grafo_origen <-
graph_from_data_frame(d = aristas, vertices = nodos,  directed=F)
#Podo cogiendo como umbral 0.4
grafo <- delete_edges(grafo_origen, E(grafo_origen)[PESO<0.4])
matgraf <- get.adjacency(grafo, attr="PESO", sparse=F)
fnb<- fviz_nbclust(matgraf, kmeans, method = "silhouette")
fnb
km_grafo <- kmeans(matgraf, centers = 4, nstart = 20)
#visualización
plot(matgraf, col= km_grafo$cluster, main="k-means k=4")
summary(km_grafo)
km_clusteres <- km_grafo$cluster
kmclust <- data.frame(nodos, km_clusteres)
c1 <- filter(kmclust, kmclust$km_clusteres == 1)
c1
c2 <- filter(kmclust, kmclust$km_clusteres == 2)
c2
c3 <- filter(kmclust, kmclust$km_clusteres == 3)
c3
c4 <- filter(kmclust, kmclust$km_clusteres == 4)
c4
fnv<- fviz_nbclust(matgraf, hcut, method = "silhouette")
fnv
#1- matriz de distancias con dist
matriz_dist <- dist(matgraf)
#2- hclust para construir dendograma
hclust_aux <- hclust(matriz_dist, method = "average")
plot(hclust_aux)
#3- cortar el dendograma y obtener clusters con cutree
grupos1 <- cutree(hclust_aux, k=2)
#represento los resultados
plot(matgraf, col=grupos1, main = "Clustering jerárquico k=2")
summary(grupos1)
hjclust <- data.frame(nodos, grupos1)
c1 <- filter(hjclust, hjclust$grupos1 == 1)
c1
c2 <- filter(hjclust, hjclust$grupos1 == 2)
c2
hjclust <- data.frame(nodos, grupos1)
c1 <- filter(hjclust, hjclust$grupos1 == 1)
c1
c2 <- filter(hjclust, hjclust$grupos1 == 2)
c2
#install.packages("factoextra")
library(igraph)
library(readxl)
library(factoextra)
library(dplyr)
df <- read.table("./grafodf.txt", header = TRUE, sep = ",")
grafodf <- df[, 3:6]
grafodf
fnb<- fviz_nbclust(grafodf, kmeans, method = "silhouette")
fnb$data
fnb
km_grafo <- kmeans(grafodf, centers = 3, nstart = 20)
#visualización
plot(grafodf, col= km_grafo$cluster, main="k-means k=3")
plot(matgraf, col= km_grafo$cluster, main="k-means k=3")
summary(km_grafo)
km_clusteres <- km_grafo$cluster
kmclust <- data.frame(nodos, km_clusteres)
df <- read.table("./grafodf.txt", header = TRUE, sep = ",")
grafodf <- df[, 3:6]
nodos <- df[, 1]
nodos
grafodf
df <- read.table("./grafodf.txt", header = TRUE, sep = ",")
grafodf <- df[, 3:6]
nodos <- df[, 2]
nodos
grafodf
df <- read.table("./grafodf.txt", header = TRUE, sep = ",")
grafodf <- df[, 3:6]
nodos <- df[, 2]
grafodf
km_clusteres <- km_grafo$cluster
kmclust <- data.frame(nodos, km_clusteres)
c1 <- filter(kmclust, kmclust$km_clusteres == 1)
c1
c2 <- filter(kmclust, kmclust$km_clusteres == 2)
c2
c3 <- filter(kmclust, kmclust$km_clusteres == 3)
c3
fnv<- fviz_nbclust(grafodf, hcut, method = "silhouette")
fnv
fnv$data
#1- matriz de distancias con dist
matriz_dist <- dist(grafodf)
#2- hclust para construir dendograma
hclust_aux <- hclust(matriz_dist, method = "average")
plot(hclust_aux)
#3- cortar el dendograma y obtener clusters con cutree
grupos1 <- cutree(hclust_aux, k=6)
#represento los resultados
plot(grafodf, col=grupos1, main = "Clustering jerárquico k=6")
summary(grupos1)
hjclust <- data.frame(nodos, grupos1)
c1 <- filter(hjclust, hjclust$grupos1 == 1)
c1
c2 <- filter(hjclust, hjclust$grupos1 == 2)
c2
c3 <- filter(hjclust, hjclust$grupos1 == 3)
c3
c4 <- filter(hjclust, hjclust$grupos1 == 4)
c4
c5 <- filter(hjclust, hjclust$grupos1 == 5)
c5
c6 <- filter(hjclust, hjclust$grupos1 == 6)
c6
set.seed(55)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
set.seed(55)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
#Cargo datos
aristas <- read_excel("./Dataset1.xlsx",
sheet = "WeigthedNetwork")
nodos <- read_excel("./Dataset1.xlsx",
sheet = "NetworkNodes")
#Construyo el grafo
grafo_origen <-
graph_from_data_frame(d = aristas, vertices = nodos,  directed=F)
#Podo cogiendo como umbral 0.4
grafo <- delete_edges(grafo_origen, E(grafo_origen)[PESO<0.4])
set.seed(55)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(matgraf, col= clp$membership, main="Propagación de etiquetas, k=2")
library(igraph)
library(readxl)
library(dplyr)
#Cargo datos
aristas <- read_excel("./Dataset1.xlsx",
sheet = "WeigthedNetwork")
nodos <- read_excel("./Dataset1.xlsx",
sheet = "NetworkNodes")
#Construyo el grafo
grafo_origen <-
graph_from_data_frame(d = aristas, vertices = nodos,  directed=F)
#Podo cogiendo como umbral 0.4
grafo <- delete_edges(grafo_origen, E(grafo_origen)[PESO<0.4])
set.seed(55)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
comunidad <- clp$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c2 <- filter(miembros, comunidad == 2)
c2$NODOS
c1 <- filter(miembros, comunidad == 1)
c1$NODOS
deg <- degree(grafo, mode = "all")
degdf <- data.frame(nodos, deg)
juntos <-merge(x=degdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$deg),]
c2[order(-c2$deg),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$cent_eing.vector),]
c2[order(-c2$cent_eing.vector),]
cent_clo <-centr_clo(grafo, mode = "all", normalized = T)
clossenes <- data.frame(nodos, cent_clo$res)
juntos <-merge(x=clossenes, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$cent_clo.res),]
c2[order(-c2$cent_clo.res),]
bet <- betweenness(grafo, directed = F)
betdf <- data.frame(nodos, bet)
juntos <-merge(x=betdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$bet),]
c2[order(-c2$bet),]
cfg <- cluster_fast_greedy(grafo)
plot(cfg, grafo)
table(cfg$membership)
comunidad <- cfg$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c3 <- filter(miembros, comunidad == 3)
c3$NODOS
c2 <- filter(miembros, comunidad == 2)
c2$NODOS
c1 <- filter(miembros, comunidad == 1)
c1$NODOS
deg <- degree(grafo, mode = "all")
degdf <- data.frame(nodos, deg)
juntos <-merge(x=degdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$deg),]
c2[order(-c2$deg),]
c3[order(-c3$deg),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$cent_eing.vector),]
c2[order(-c2$cent_eing.vector),]
c3[order(-c3$cent_eing.vector),]
cent_clo <-centr_clo(grafo, mode = "all", normalized = T)
clossenes <- data.frame(nodos, cent_clo$res)
juntos <-merge(x=clossenes, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$cent_clo.res),]
c2[order(-c2$cent_clo.res),]
c3[order(-c3$cent_clo.res),]
bet <- betweenness(grafo, directed = F)
betdf <- data.frame(nodos, bet)
juntos <-merge(x=betdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$bet),]
c2[order(-c2$bet),]
c3[order(-c3$bet),]
library(igraph)
library(readxl)
library(dplyr)
#Cargo datos
aristas <- read_excel("./Dataset1.xlsx",
sheet = "WeigthedNetwork")
nodos <- read_excel("./Dataset1.xlsx",
sheet = "NetworkNodes")
#Construyo el grafo
grafo_origen <-
graph_from_data_frame(d = aristas, vertices = nodos,  directed=F)
#Podo cogiendo como umbral 0.4
grafo <- delete_edges(grafo_origen, E(grafo_origen)[PESO<0.4])
clp <- cluster_label_prop(grafo, initial = inicio)
set.seed(55)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio, weights = E(grafo))
plot(clp, grafo)
table(clp$membership)
comunidad <- clp$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c2 <- filter(miembros, comunidad == 2)
c2$NODOS
c1 <- filter(miembros, comunidad == 1)
c1$NODOS
comunidad <- clp$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c1 <- filter(miembros, comunidad == 1)
c1$NODOS
comunidad <- clp$membership
miembros <- data.frame(nodos, comunidad)
c1 <- filter(miembros, comunidad == 1)
c1$NODOS
deg <- degree(grafo, mode = "all")
degdf <- data.frame(nodos, deg)
juntos <-merge(x=degdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c1[order(-c1$deg),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = F)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$cent_eing.vector),]
c2[order(-c2$cent_eing.vector),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = F)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c1[order(-c1$cent_eing.vector),]
cent_clo <-centr_clo(grafo, mode = "all", normalized = F)
clossenes <- data.frame(nodos, cent_clo$res)
juntos <-merge(x=clossenes, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c1[order(-c1$cent_clo.res),]
bet <- betweenness(grafo, directed = F, weights = E(grafo))
betdf <- data.frame(nodos, bet)
juntos <-merge(x=betdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c1[order(-c1$bet),]
cfg <- cluster_fast_greedy(grafo, weights = E(grafo))
plot(cfg, grafo)
cfg <- cluster_fast_greedy(grafo, weights = E(grafo))
plot(cfg, grafo)
table(cfg$membership)
comunidad <- cfg$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c4 <- filter(miembros, comunidad == 4)
c4$NODOS
c3 <- filter(miembros, comunidad == 3)
c3$NODOS
c2 <- filter(miembros, comunidad == 2)
c2$NODOS
c1 <- filter(miembros, comunidad == 1)
c1$NODOS
comunidad <- cfg$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c4 <- filter(miembros, comunidad == 4)
c4
c3 <- filter(miembros, comunidad == 3)
c3
c2 <- filter(miembros, comunidad == 2)
c2
c1 <- filter(miembros, comunidad == 1)
c1
comunidad <- clp$membership
miembros <- data.frame(nodos, comunidad)
c1 <- filter(miembros, comunidad == 1)
c1
comunidad <- cfg$membership
miembros <- data.frame(nodos, comunidad)
c4 <- filter(miembros, comunidad == 4)
c4
c3 <- filter(miembros, comunidad == 3)
c3
c2 <- filter(miembros, comunidad == 2)
c2
c1 <- filter(miembros, comunidad == 1)
c1
deg <- degree(grafo, mode = "all")
degdf <- data.frame(nodos, deg)
juntos <-merge(x=degdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$deg),]
c2[order(-c2$deg),]
c3[order(-c3$deg),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$cent_eing.vector),]
c2[order(-c2$cent_eing.vector),]
c3[order(-c3$cent_eing.vector),]
cent_clo <-centr_clo(grafo, mode = "all", normalized = T)
clossenes <- data.frame(nodos, cent_clo$res)
juntos <-merge(x=clossenes, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$cent_clo.res),]
c2[order(-c2$cent_clo.res),]
c3[order(-c3$cent_clo.res),]
bet <- betweenness(grafo, directed = F, weights = E(grafo))
betdf <- data.frame(nodos, bet)
juntos <-merge(x=betdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$bet),]
c2[order(-c2$bet),]
c3[order(-c3$bet),]
arbol2 <- train (Y2 ~ ., trainY2,
tuneGrid = expand.grid(cp = c(0.01, 0.03, 0.05, 0.07)),
method="rpart",
trControl=control_class))
arbol2 <- train (Y2 ~ ., trainY2,
tuneGrid = expand.grid(cp = c(0.01, 0.03, 0.05, 0.07),
method="rpart",
trControl=control_class))
#install.packages("rpart")
#install.packages("rpart.plot")
#install.packages("gplots")
#install.packages("caret")
library(rpart)
library(rpart.plot)
library(dplyr)
library(caret)
grafodf <- read.table("./grafodf.txt", header = TRUE, sep = ",")
print(grafodf)
colnames(grafodf) <- c( "ID", "NODOS", "X1","X2", "X3", "X4", "Y1", "Y2" )
grafodf
grafodf$Y1 <- as.factor(grafodf$Y1)
grafodf$Y2 <- as.factor(grafodf$Y2)
df1 <- grafodf[, 3:7]
df2 <- select(grafodf,3,4,5,6, 8)
set.seed(3456)
trainIndex1 <- createDataPartition(df1$Y1, p = .75,
list = FALSE)
trainY1 <- df1[ trainIndex1,]
testY1  <- df1[-trainIndex1,]
summary(trainY1)
dim(trainY1)
summary(testY1)
dim(testY1)
hist(as.numeric(trainY1$Y1))
hist(as.numeric(testY1$Y1))
set.seed(1)
trainIndex2 <- createDataPartition(df2$Y2, p = .75,
list = FALSE)
trainY2 <- df2[ trainIndex2,]
testY2  <- df2[-trainIndex2,]
summary(trainY2)
dim(trainY2)
summary(testY2)
dim(testY2)
hist(as.numeric(trainY2$Y2))
hist(as.numeric(testY2$Y2))
fit1 <- rpart(Y1~., data = trainY1, method = 'class')
rpart.plot(fit1)
fit2 <- rpart(Y2~., data = trainY2, method = 'class')
rpart.plot(fit2)
summary(fit1)
pred1 <- predict(fit1, testY1, type = 'class')
#evaluacion(pred1, testY1$Y1)
confusionMatrix(table(pred1, testY1$Y1))
pred2 <- predict(fit2, testY2, type = 'class')
confusionMatrix(table(pred2, testY2$Y2))
control_class <- trainControl(
method = "cv",
number = 10
)
arbol2 <- train (Y2 ~ ., trainY2,
tuneGrid = expand.grid(cp = c(0.01, 0.03, 0.05, 0.07),
method="rpart",
trControl=control_class))
#install.packages("corrplot")
library(igraph)
library(readxl)
library(corrplot)
grafodf <- read.table("./dataframe.txt", header = TRUE, sep = ",")
