table(clp$membership)
set.seed(18)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(20)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(21)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(24)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(22)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(25)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(30)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(31)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(29)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(32)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(33)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(34)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(28)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(35)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(36)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(37)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(38)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(39)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(40)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(41)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(50)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(51)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(60)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(52)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
set.seed(53)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(54)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
set.seed(55)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
comunidad <- clp$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c2 <- filter(miembros, comunidad == 2)
c2$NODOS
c1 <- filter(miembros, comunidad == 1)
#c1$NODOS
comunidad <- clp$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c2 <- filter(miembros, comunidad == 2)
#c2$NODOS
c1 <- filter(miembros, comunidad == 1)
c1$NODOS
comunidad <- clp$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c2 <- filter(miembros, comunidad == 2)
c2$NODOS
c1 <- filter(miembros, comunidad == 1)
#c1$NODOS
comunidad <- clp$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c2 <- filter(miembros, comunidad == 2)
#c2$NODOS
c1 <- filter(miembros, comunidad == 1)
#c1$NODOS
cfg <- cluster_fast_greedy(grafo)
plot(cfg, grafo)
table(cfg$membership)
table(cfg$membership)
table(cfg$membership)
cfg <- cluster_fast_greedy(grafo)
plot(cfg, grafo)
table(cfg$membership)
table(cfg$membership)
cfg <- cluster_fast_greedy(grafo)
plot(cfg, grafo)
table(cfg$membership)
comunidad <- cfg$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c3 <- filter(miembros, comunidad == 3)
c3$NODOS
c2 <- filter(miembros, comunidad == 2)
#c2$NODOS
c1 <- filter(miembros, comunidad == 1)
#c1$NODOS
comunidad <- cfg$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c3 <- filter(miembros, comunidad == 3)
#c3$NODOS
c2 <- filter(miembros, comunidad == 2)
#c2$NODOS
c1 <- filter(miembros, comunidad == 1)
#c1$NODOS
deg <- degree(grafo, mode = "all")
#orden <- sort(deg, decreasing = T)
#print(orden[1:5])
deg <- degree(grafo, mode = "all")
orden <- sort(deg, decreasing = T)
#print(orden[1:5])
deg <- degree(grafo, mode = "all")
orden <- sort(deg, decreasing = T)
orden
#print(orden[1:5])
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
eigencen[order(-eigencen$cent_eing.vector),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
merge(x=eigencen, miembros, by= "NODOS")
#eigencen[order(-eigencen$cent_eing.vector),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
juntos[order(-eigencen$cent_eing.vector),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-eigencen$cent_eing.vector),]
c2[order(-eigencen$cent_eing.vector),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
juntos
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-eigencen$cent_eing.vector),]
c2[order(-eigencen$cent_eing.vector),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1
c2
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$cent_eing.vector),]
c2[order(-c1$cent_eing.vector),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$cent_eing.vector),]
c2[order(-c2$cent_eing.vector),]
library(igraph)
library(readxl)
library(dplyr)
#Cargo datos
aristas <- read_excel("./Dataset1.xlsx",
sheet = "WeigthedNetwork")
nodos <- read_excel("./Dataset1.xlsx",
sheet = "NetworkNodes")
#Construyo el grafo
grafo_origen <-
graph_from_data_frame(d = aristas, vertices = nodos,  directed=F)
#Podo cogiendo como umbral 0.4
grafo <- delete_edges(grafo_origen, E(grafo_origen)[PESO<0.4])
set.seed(55)
inicio<-sample(c(0:176), size = 177, replace = TRUE)
clp <- cluster_label_prop(grafo, initial = inicio)
plot(clp, grafo)
table(clp$membership)
comunidad <- clp$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c2 <- filter(miembros, comunidad == 2)
#c2$NODOS
c1 <- filter(miembros, comunidad == 1)
#c1$NODOS
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$cent_eing.vector),]
c2[order(-c2$cent_eing.vector),]
cent_clo <-centr_clo(grafo, mode = "all", normalized = T)
clossenes <- data.frame(nodos, cent_clo$res)
juntos <-merge(x=clossenes, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1
c2
#c1[order(-c1$cent_eing.vector),]
#c2[order(-c2$cent_eing.vector),]
cent_clo <-centr_clo(grafo, mode = "all", normalized = T)
clossenes <- data.frame(nodos, cent_clo$res)
juntos <-merge(x=clossenes, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$cent_clo.res.vector),]
cent_clo <-centr_clo(grafo, mode = "all", normalized = T)
clossenes <- data.frame(nodos, cent_clo$res)
juntos <-merge(x=clossenes, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$cent_clo.res),]
c2[order(-c2$cent_clo.res),]
bet <- betweenness(grafo, directed = F)
orden <- sort(bet, decreasing = T)
juntos <-merge(x=clossenes, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
bet <- betweenness(grafo, directed = F)
orden <- sort(bet, decreasing = T)
juntos <-merge(x=clossenes, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1
c2
bet <- betweenness(grafo, directed = F)
orden <- sort(bet, decreasing = T)
juntos <-merge(x=bet, miembros, by= "NODOS")
bet <- betweenness(grafo, directed = F)
betdf <- data.frame(nodos, bet)
#orden <- sort(bet, decreasing = T)
#print(orden[1:5])
bet <- betweenness(grafo, directed = F)
betdf <- data.frame(nodos, bet)
betdf
#orden <- sort(bet, decreasing = T)
#print(orden[1:5])
bet <- betweenness(grafo, directed = F)
betdf <- data.frame(nodos, bet)
betdf[order(-clossenes$bet),]
bet <- betweenness(grafo, directed = F)
betdf <- data.frame(nodos, bet)
betdf[order(-betdf$bet),]
deg <- degree(grafo, mode = "all")
degdf <- data.frame(nodos, deg)
degdf[order(-degdff$deg),]
deg <- degree(grafo, mode = "all")
degdf <- data.frame(nodos, deg)
degdf[order(-degdf$deg),]
deg <- degree(grafo, mode = "all")
degdf <- data.frame(nodos, deg)
juntos <-merge(x=degdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$deg),]
c2[order(-c2$deg),]
bet <- betweenness(grafo, directed = F)
betdf <- data.frame(nodos, bet)
juntos <-merge(x=betdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c1[order(-c1$bet),]
c2[order(-c2$bet),]
comunidad <- cfg$membership
miembros <- data.frame(nodos, comunidad)
miembros[order(-comunidad),]
c3 <- filter(miembros, comunidad == 3)
#c3$NODOS
c2 <- filter(miembros, comunidad == 2)
#c2$NODOS
c1 <- filter(miembros, comunidad == 1)
#c1$NODOS
deg <- degree(grafo, mode = "all")
degdf <- data.frame(nodos, deg)
juntos <-merge(x=degdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$deg),]
c2[order(-c2$deg),]
c3[order(-c3$deg),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c2 <- filter(juntos, comunidad == 3)
c1[order(-c1$cent_eing.vector),]
c2[order(-c2$cent_eing.vector),]
c3[order(-c3$cent_eing.vector),]
cent_eing <- centr_eigen(grafo, directed = F, normalized = T)
eigencen <- data.frame(nodos, cent_eing$vector)
juntos <-merge(x=eigencen, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$cent_eing.vector),]
c2[order(-c2$cent_eing.vector),]
c3[order(-c3$cent_eing.vector),]
cent_clo <-centr_clo(grafo, mode = "all", normalized = T)
clossenes <- data.frame(nodos, cent_clo$res)
juntos <-merge(x=clossenes, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$cent_clo.res),]
c2[order(-c2$cent_clo.res),]
c3[order(-c3$cent_clo.res),]
bet <- betweenness(grafo, directed = F)
betdf <- data.frame(nodos, bet)
juntos <-merge(x=betdf, miembros, by= "NODOS")
c1 <- filter(juntos, comunidad == 1)
c2 <- filter(juntos, comunidad == 2)
c3 <- filter(juntos, comunidad == 3)
c1[order(-c1$bet),]
c2[order(-c2$bet),]
c3[order(-c3$bet),]
#install.packages("factoextra")
library(igraph)
library(readxl)
library(factoextra)
#Cargo datos
aristas <- read_excel("./Dataset1.xlsx",
sheet = "WeigthedNetwork")
nodos <- read_excel("./Dataset1.xlsx",
sheet = "NetworkNodes")
#Construyo el grafo
grafo_origen <-
graph_from_data_frame(d = aristas, vertices = nodos,  directed=F)
#Podo cogiendo como umbral 0.4
grafo <- delete_edges(grafo_origen, E(grafo_origen)[PESO<0.4])
km_grafo <- kmeans(matgraf, centers = 4, nstart = 20)
#inspeccionar resultados
summary(km_grafo)
km_grafo$cluster #se ve como se distribuyen los puntos
#visualización
plot(matgraf, col= km_grafo$cluster, main="Cuatro clusters")
km_grafo <- kmeans(matgraf, centers = 4, nstart = 20)
#visualización
plot(matgraf, col= km_grafo$cluster, main="Cuatro clusters")
#inspeccionar resultados
summary(km_grafo)
summary(km_grafo)
kmclust <- km_grafo$cluster #se ve como se distribuyen los puntos
summary(km_grafo)
kmclust <- data.frame(km_grafo$cluster)
summary(km_grafo)
kmclust <- data.frame(km_grafo$cluster)
kmclust
summary(km_grafo)
kmclust <- data.frame(km_grafo$cluster)
kmclust
c1 <- kmclust$km_grafo.cluster==1
summary(km_grafo)
kmclust <- data.frame(km_grafo$cluster)
kmclust
c1 <- kmclust$km_grafo.cluster==1
c1
summary(km_grafo)
kmclust <- data.frame(km_grafo$cluster)
c1 <- kmclust$km_grafo.cluster==1
c1
summary(km_grafo)
kmclust <- data.frame(km_grafo$cluster)
c1 <- data.frame(kmclust$km_grafo.cluster==1)
c1
summary(km_grafo)
kmclust <- data.frame(km_grafo$cluster)
c1 <- filter(kmclust, kmclust$km_grafo.cluster == 1)
c1
summary(km_grafo)
kmclust <- data.frame(nodos, km_grafo$cluster)
c1 <- filter(kmclust, kmclust$km_grafo.cluster == 1)
c1
summary(km_grafo)
kmclust <- data.frame(nodos, km_grafo$cluster)
c1 <- filter(kmclust, kmclust$km_grafo.cluster == 1)
c2 <- filter(kmclust, kmclust$km_grafo.cluster == 2)
c3 <- filter(kmclust, kmclust$km_grafo.cluster == 3)
c1
c2
c3
summary(km_grafo)
kmclust <- data.frame(nodos, km_grafo$cluster)
c1 <- filter(kmclust, kmclust$km_grafo.cluster == 1)
c2 <- filter(kmclust, kmclust$km_grafo.cluster == 2)
c3 <- filter(kmclust, kmclust$km_grafo.cluster == 3)
sizes(c1)
summary(km_grafo)
kmclust <- data.frame(nodos, km_grafo$cluster)
c1 <- filter(kmclust, kmclust$km_grafo.cluster == 1)
c2 <- filter(kmclust, kmclust$km_grafo.cluster == 2)
c3 <- filter(kmclust, kmclust$km_grafo.cluster == 3)
c1
c2
c3
summary(km_grafo)
kmclust <- data.frame(nodos, km_grafo$cluster)
c1 <- filter(kmclust, kmclust$km_grafo.cluster == 1)
c2 <- filter(kmclust, kmclust$km_grafo.cluster == 2)
c3 <- filter(kmclust, kmclust$km_grafo.cluster == 3)
c4 <- filter(kmclust, kmclust$km_grafo.cluster == 4)
c1
c2
c3
c4
summary(grupos1)
summary(grupos1)
hjclust <- data.frame(nodos, grupos1)
summary(grupos1)
hjclust <- data.frame(nodos, grupos1)
hjclust
#3- cortar el dendograma y obtener clusters con cutree
grupos1 <- cutree(hclust_aux, k=2)
#represento los resultados
plot(matgraf, col=grupos1)
summary(grupos1)
hjclust <- data.frame(nodos, grupos1)
c1 <- filter(hjclust, hjclust$grupos1 == 1)
c2 <- filter(hjclust, hjclust$grupos1 == 2)
c1
c2
library(igraph)
library(readxl)
#Cargo datos
aristas <- read_excel("./Dataset1.xlsx",
sheet = "WeigthedNetwork")
nodos <- read_excel("./Dataset1.xlsx",
sheet = "NetworkNodes")
#Construyo el grafo
grafo_origen <-
graph_from_data_frame(d = aristas, vertices = nodos,  directed=F)
#Podo cogiendo como umbral 0.4
grafo <- delete_edges(grafo_origen, E(grafo_origen)[PESO<0.4])
